class Solution {
public:
    int bs(vector<int> &nums,int l,int h, int target) 
    { 
        if (h < l) 
            return -1; 

        int mid = l +  (h - l)/2; 
        if (nums[mid] == target) 
            return mid; 

        if (target > nums[mid]) 
            return bs(nums, (mid + 1), h, target); 

        return bs(nums, l, (mid - 1), target); 
    } 
    
    int find_rot_point(vector<int>& a,int l,int h)
    {
        if(h<l)
            return -1;
        
        if(h==l)
            return h;
        
        int m = l + (h-l)/2;
       // cout<<m<<endl;
        if(m<h && a[m]>a[m+1])
            return m;
        
        if(l<m && a[m]<a[m-1])
            return m-1;
        
        if(a[l]>=a[m])
            return find_rot_point(a,l,m-1);
        
        return find_rot_point(a,m+1,h);
    }
    
    int search(vector<int>& nums, int target) 
    {
        int p = find_rot_point(nums,0,nums.size()-1);
        //cout<<"p=="<<p<<endl;
        if(p==-1)
            return bs(nums,0,nums.size()-1,target);
        
        if(nums[p] == target)
            return p;
        
        if(nums[0] <= target)
            return bs(nums,0,p-1,target);
         
        return bs(nums,p+1,nums.size()-1,target);
    }
};